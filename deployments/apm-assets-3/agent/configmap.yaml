---
# Source of template: signalfx-agent/templates/configmap.yaml
# Contact: dave@signalfx.com
#
# 4 locations to update:
# - signalFxAccessToken
# - ingestUrl
# - traceEndpointUrl
# - kubernetes_cluster

apiVersion: v1
kind: ConfigMap
metadata:
  name: signalfx-agent
  labels:
    app: signalfx-agent
    service: signalfx-agent
data:
  agent.yaml: |
    signalFxAccessToken: ${SFX_ACCESS_TOKEN}
    ingestUrl: https://ingest.signalfx.com/ # eg. http://10.0.0.1:8081/
    traceEndpointUrl: https://ingest.signalfx.com/v1/trace # eg. http://10.0.0.1:8081/v1/trace
    apiUrl: {"#from": "/etc/signalfx/api_url", default: "https://api.signalfx.com"}
    intervalSeconds: 10

    logging:
      level: info

    globalDimensions:
      kubernetes_cluster: bashburn_k8s # name of cluster for metadata

    sendMachineID: false

    writer:
      sendTraceHostCorrelationMetrics: true

    observers:

    monitors:
    - type: internal-metrics
    - type: trace-forwarder
      listenAddress: 0.0.0.0:9080 # listen on this port for spans/traces
      sendInternalMetrics: true
      metricsToExclude:
       - metricNames:
         - sfxagent.trace_spans_sent
         - sfxagent.trace_spans_dropped
         negated: true
    - type: kubelet-stats
      kubeletAPI:
        authType: none
        url: http://localhost:10255
    - type: collectd/cpu
    - type: collectd/cpufreq
    - type: collectd/df
      hostFSPath: /hostfs
    - type: collectd/disk
    - type: collectd/interface
    - type: collectd/load
    - type: collectd/memory
    - type: collectd/protocols
    - type: collectd/signalfx-metadata
      procFSPath: /hostfs/proc
    - type: host-metadata
      etcPath: /hostfs/etc
      procFSPath: /hostfs/proc
    - type: collectd/uptime
    - type: collectd/vmem

    - type: collectd/processes
      processes:
      - collectd
      - signalfx-agent

    # Collects k8s cluster-level metrics
    - type: kubernetes-cluster
      useNodeName: true

    - type: docker-container-stats
      dockerURL: unix:///var/run/docker.sock
      excludedImages:
       - '*pause-amd64*'
      labelsToDimensions:
        io.kubernetes.container.name: container_spec_name
        io.kubernetes.pod.name: kubernetes_pod_name
        io.kubernetes.pod.uid: kubernetes_pod_uid
        io.kubernetes.pod.namespace: kubernetes_namespace

    - type: collectd/activemq
      discoveryRule: container_image =~ "activemq" && private_port == 1099

    - type: collectd/apache
      discoveryRule: container_image =~ "apache" && private_port == 80

    - type: collectd/cassandra
      discoveryRule: container_image =~ "cassandra" && private_port == 7199

    - type: collectd/consul
      discoveryRule: container_image =~ "consul" && private_port == 8500

    - type: collectd/elasticsearch
      discoveryRule: container_image =~ "elasticsearch" && port == 9200

    - type: collectd/etcd
      discoveryRule: container_image =~ "etcd" && port == 2379
      clusterName: my-cluster

    - type: collectd/haproxy
      discoveryRule: container_image =~ "haproxy" && port == 9000

    - type: collectd/kafka
      discoveryRule: container_image =~ "kafka" && private_port == 9092

    - type: collectd/memcached
      discoveryRule: container_image =~ "memcache" && private_port == 11211

    - type: collectd/mongodb
      discoveryRule: container_image =~ "mongo" && private_port == 27017
      databases:
      - mydatabase

    - type: collectd/mysql
      discoveryRule: container_image =~ "mysql" && private_port == 3306
      databases:
      - name: mydb
      username: admin

    - type: collectd/nginx
      discoveryRule: container_image =~ "nginx" && private_port == 80

    - type: collectd/rabbitmq
      discoveryRule: container_image =~ "rabbitmq" && private_port == 15672

    - type: collectd/redis
      discoveryRule: container_image =~ "redis" && private_port == 6379

    - type: collectd/spark
      discoveryRule: container_image =~ "spark" && private_port == 8080
      clusterType: Standalone
      collectApplicationMetrics: true
      isMaster: true

    - type: collectd/spark
      discoveryRule: container_image =~ "spark" && private_port >= 8081
      clusterType: Standalone
      isMaster: false

    - type: collectd/zookeeper
      discoveryRule: container_image =~ "zookeeper" && private_port == 2181



    collectd:
      readThreads: 5
      writeQueueLimitHigh: 500000
      writeQueueLimitLow: 400000
      timeout: 40
      logLevel: info

    metricsToExclude:

